import { CreateCommand } from '@api/common/abstract/application/commands.abstract';
import { ConflictException, Inject, Injectable } from '@nestjs/common';
import { Create{{pascalCase name}}Request } from '@repo/shared';
import { randomUUID } from 'crypto';
import { {{pascalCase name}}Translation } from '../../domain/entities/{{kebabCase name}}-translation.entity';
import { {{pascalCase name}} } from '../../domain/entities/{{kebabCase name}}.entity';
import {
    {{constantCase name}}_REPOSITORY,
    I{{pascalCase name}}Repository,
} from '../../domain/repositories/i-{{kebabCase name}}.repository';

export class Create{{pascalCase name}}Command extends CreateCommand<Create{{pascalCase name}}Request> {}

@Injectable()
export class Create{{pascalCase name}}Handler {
    constructor(
        @Inject({{constantCase name}}_REPOSITORY) private readonly repository: I{{pascalCase name}}Repository,
    ) {}

    async execute({ data }: Create{{pascalCase name}}Command) {
        const slugExists = await this.repository.slugExists(data.slug);
        if (slugExists) {
            throw new ConflictException('Slug already exists');
        }

        const {{camelCase name}} = {{pascalCase name}}.create(randomUUID(), data.slug);
        const saved{{pascalCase name}} = await this.repository.save({{camelCase name}});

        const translations = data.translations.map((t) =>
            {{pascalCase name}}Translation.create(randomUUID(), t.locale, t.name),
        );

        await this.repository.saveTranslations(saved{{pascalCase name}}.id, translations);

        return this.repository.findByIdWithTranslations(saved{{pascalCase name}}.id);
    }
}
