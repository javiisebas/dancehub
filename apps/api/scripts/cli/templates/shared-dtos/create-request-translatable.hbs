import { Type } from 'class-transformer'; import { ArrayMinSize, IsArray, IsNotEmpty, IsString,
Matches, MaxLength, MinLength, ValidateNested, } from 'class-validator'; import {
{{pascalCase name}}TranslationDto } from './{{kebabCase name}}-translation.dto'; export class Create{{pascalCase
    name
}}Request { @IsString({ message: 'Slug must be a string' }) @IsNotEmpty({ message: 'Slug cannot be
empty' }) @MinLength(2, { message: 'Slug must be at least 2 characters long' }) @MaxLength(255, {
message: 'Slug cannot exceed 255 characters' }) @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, { message:
'Slug must be lowercase, alphanumeric and can contain hyphens', }) slug!: string; @IsArray({
message: 'Translations must be an array' }) @ValidateNested({ each: true }) @ArrayMinSize(1, {
message: 'At least one translation is required' }) @Type(() =>
{{pascalCase name}}TranslationDto) translations!:
{{pascalCase name}}TranslationDto[]; }