import { Serialize } from '@api/common/decorators/serialize.decorator';
import { Body, Controller, Delete, Get, Param, Patch, Post, Query } from '@nestjs/common';
import {
    Create{{pascalCase name}}Request,
    Paginated{{pascalCase name}}Request,
    Update{{pascalCase name}}Request,
    {{pascalCase name}}PaginatedResponse,
    {{pascalCase name}}Response,
} from '@repo/shared';
import {
    Create{{pascalCase name}}Command,
    Create{{pascalCase name}}Handler,
} from '../../application/commands/create-{{kebabCase name}}.handler';
import {
    Delete{{pascalCase name}}Command,
    Delete{{pascalCase name}}Handler,
} from '../../application/commands/delete-{{kebabCase name}}.handler';
import {
    Update{{pascalCase name}}Command,
    Update{{pascalCase name}}Handler,
} from '../../application/commands/update-{{kebabCase name}}.handler';
import {
    FindMany{{pascalCase (pluralize name)}}Handler,
    FindMany{{pascalCase (pluralize name)}}Query,
} from '../../application/queries/find-many-{{pluralize (kebabCase name)}}.handler';
import {
    GetPaginated{{pascalCase (pluralize name)}}Handler,
    GetPaginated{{pascalCase (pluralize name)}}Query,
} from '../../application/queries/get-paginated-{{pluralize (kebabCase name)}}.handler';
import {
    Get{{pascalCase name}}ByFieldHandler,
    Get{{pascalCase name}}ByFieldQuery,
} from '../../application/queries/get-{{kebabCase name}}-by-field.handler';

@Controller('{{pluralize (kebabCase name)}}')
export class {{pascalCase name}}Controller {
    constructor(
        private readonly create{{pascalCase name}}Handler: Create{{pascalCase name}}Handler,
        private readonly update{{pascalCase name}}Handler: Update{{pascalCase name}}Handler,
        private readonly delete{{pascalCase name}}Handler: Delete{{pascalCase name}}Handler,
        private readonly get{{pascalCase name}}ByFieldHandler: Get{{pascalCase name}}ByFieldHandler,
        private readonly findMany{{pascalCase (pluralize name)}}Handler: FindMany{{pascalCase (pluralize name)}}Handler,
        private readonly getPaginated{{pascalCase (pluralize name)}}Handler: GetPaginated{{pascalCase (pluralize name)}}Handler,
    ) {}

    @Post()
    @Serialize({{pascalCase name}}Response)
    async create(@Body() dto: Create{{pascalCase name}}Request) {
        const command = new Create{{pascalCase name}}Command(dto);
        return this.create{{pascalCase name}}Handler.execute(command);
    }

    @Patch(':id')
    @Serialize({{pascalCase name}}Response)
    async update(@Param('id') id: string, @Body() dto: Update{{pascalCase name}}Request) {
        const command = new Update{{pascalCase name}}Command(id, dto);
        return this.update{{pascalCase name}}Handler.execute(command);
    }

    @Delete(':id')
    async delete(@Param('id') id: string): Promise<void> {
        const command = new Delete{{pascalCase name}}Command(id);
        await this.delete{{pascalCase name}}Handler.execute(command);
    }

    @Get('search')
    @Serialize({{pascalCase name}}Response)
    async search(@Query('limit') limit?: string) {
        const query = new FindMany{{pascalCase (pluralize name)}}Query({
            limit: limit ? parseInt(limit) : undefined,
        });
        return this.findMany{{pascalCase (pluralize name)}}Handler.execute(query);
    }

    @Get()
    @Serialize({{pascalCase name}}PaginatedResponse)
    async paginate(@Query() dto: Paginated{{pascalCase name}}Request) {
        const query = new GetPaginated{{pascalCase (pluralize name)}}Query(dto);
        return this.getPaginated{{pascalCase (pluralize name)}}Handler.execute(query);
    }

    @Get(':id')
    @Serialize({{pascalCase name}}Response)
    async findById(@Param('id') id: string) {
        const query = new Get{{pascalCase name}}ByFieldQuery('id', id);
        return this.get{{pascalCase name}}ByFieldHandler.execute(query);
    }
}