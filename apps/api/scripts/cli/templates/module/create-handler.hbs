import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';
import { Inject } from '@nestjs/common';
import { randomUUID } from 'crypto';

import { Create{{pascalCase name}}Request } from '@repo/shared/dtos/{{kebabCase name}}';
import { {{pascalCase name}} } from '../../domain/entities/{{kebabCase name}}.entity';
import { I{{pascalCase name}}Repository } from '../../domain/repositories/i-{{kebabCase name}}.repository';

export class Create{{pascalCase name}}Command {
    constructor(public readonly data: Create{{pascalCase name}}Request) {}
}

@CommandHandler(Create{{pascalCase name}}Command)
export class Create{{pascalCase name}}Handler implements ICommandHandler<Create{{pascalCase name}}Command> {
    constructor(
        @Inject('I{{pascalCase name}}Repository')
        private readonly {{camelCase name}}Repository: I{{pascalCase name}}Repository,
    ) {}

    async execute(command: Create{{pascalCase name}}Command): Promise<{{pascalCase name}}> {
        const { data } = command;

        const {{camelCase name}} = {{pascalCase name}}.create(
            randomUUID(),
{{#if fields}}
{{#each fields}}
            data.{{camelCase this.name}},
{{/each}}
{{else}}
            // TODO: Add your field mappings here
{{/if}}
        );

        return await this.{{camelCase name}}Repository.create({{camelCase name}});
    }
}