import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';
import { Inject } from '@nestjs/common';
import { NotFoundException } from '@api/common/exceptions';

import { Update{{pascalCase name}}Request } from '@repo/shared/dtos/{{kebabCase name}}';
import { {{pascalCase name}} } from '../../domain/entities/{{kebabCase name}}.entity';
import { I{{pascalCase name}}Repository } from '../../domain/repositories/i-{{kebabCase name}}.repository';

export class Update{{pascalCase name}}Command {
    constructor(
        public readonly id: string,
        public readonly data: Update{{pascalCase name}}Request,
    ) {}
}

@CommandHandler(Update{{pascalCase name}}Command)
export class Update{{pascalCase name}}Handler implements ICommandHandler<Update{{pascalCase name}}Command> {
    constructor(
        @Inject('I{{pascalCase name}}Repository')
        private readonly {{camelCase name}}Repository: I{{pascalCase name}}Repository,
    ) {}

    async execute(command: Update{{pascalCase name}}Command): Promise<{{pascalCase name}}> {
        const { id, data } = command;

        const {{camelCase name}} = await this.{{camelCase name}}Repository.findById(id);
        if (!{{camelCase name}}) {
            throw new NotFoundException('{{pascalCase name}}');
        }

{{#if fields}}
{{#each fields}}
        if (data.{{camelCase this.name}} !== undefined) {
            {{camelCase @root.name}}.update{{pascalCase this.name}}(data.{{camelCase this.name}});
        }
{{/each}}
{{else}}
        // TODO: Add your field updates here
        // Example: if (data.field !== undefined) { {{camelCase name}}.updateField(data.field); }
{{/if}}

        return await this.{{camelCase name}}Repository.update({{camelCase name}});
    }
}