import { Inject, Injectable } from '@nestjs/common';
import { eq } from 'drizzle-orm';
import { NodePgDatabase } from 'drizzle-orm/node-postgres';

import { BaseRepository } from '@api/common/abstract/infrastructure/base.repository';
import { I{{pascalCase name}}Repository } from '../../domain/repositories/i-{{kebabCase name}}.repository';
import { {{pascalCase name}} } from '../../domain/entities/{{kebabCase name}}.entity';
import { {{camelCase name}}Schema } from '../schemas/{{kebabCase name}}.schema';
import * as schema from '@api/modules/core/database/schema';

@Injectable()
export class {{pascalCase name}}Repository
    extends BaseRepository<typeof {{camelCase name}}Schema, {{pascalCase name}}>
    implements I{{pascalCase name}}Repository
{
    constructor(@Inject('DRIZZLE_CLIENT') db: NodePgDatabase<typeof schema>) {
        super(db, {{camelCase name}}Schema);
    }

    toDomain(schema: typeof {{camelCase name}}Schema.$inferSelect): {{pascalCase name}} {
        return new {{pascalCase name}}(
            schema.id,
{{#if fields}}
{{#each fields}}
            schema.{{camelCase this.name}},
{{/each}}
{{else}}
            // TODO: Add your field mappings here
{{/if}}
            schema.createdAt,
            schema.updatedAt,
        );
    }

    toSchema(entity: {{pascalCase name}}): typeof {{camelCase name}}Schema.$inferInsert {
        return {
            id: entity.id,
{{#if fields}}
{{#each fields}}
            {{camelCase this.name}}: entity.{{camelCase this.name}},
{{/each}}
{{else}}
            // TODO: Add your field mappings here
{{/if}}
            createdAt: entity.createdAt,
            updatedAt: entity.updatedAt,
        };
    }
}